# DataSource Config
spring:
  profiles:
    active: dev
  application:
    name: wow
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://67.207.80.139:3306/wow?characterEncoding=utf-8&userSSL=false
    username: root
    password: 123456a
  redis:
    database: 0
    host: localhost
    port: 6379
    password: 123456a
    timeout: 1000
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  kafka:
    bootstrap-servers: 67.207.80.139:9093
    producer:
      # 消息重发的次数。
      retries: 3
      retry-backoff-ms: 1000
      #一个批次可以使用的内存大小
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      #      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      #      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      # 手工ack，调用ack后立刻提交offset
      ack-mode: manual_immediate
      # 容器运行的线程数
      concurrency: 4
      # 避免出现主题未创建报错
      missing-topics-fatal: false

swagger:
  enable: true
  application-name: ${spring.application.name}
  application-version: 1.0
  application-description: Swagger 3.0 for WOW backend
  try-host: http://localhost:${server.port}
jwt:
  header: "Authorization" #token返回头部
  tokenPrefix: "Bearer " #token前缀
  secret: "qwertyuiop7418520" #密钥
  expireTime: 60 #token有效时间 (分钟) 建议一小时以上
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath:mapper/*.xml


# 服务器版本
server:
  port: 8080
---
server:
  port: 8080
logging:
  level:
    root: info
spring:
  datasource:
    url: jdbc:mysql://67.207.80.139:3306/wow?characterEncoding=utf-8&userSSL=false
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: 127.0.0.1:9092
  redis:
    host: localhost

# 个人版本
---
logging:
  level:
    root: info
server:
  port: 8080
spring:
  config:
    activate:
      on-profile: zmh
    datasource:
      url: jdbc:mysql://67.207.80.139:3306/wow?characterEncoding=utf-8&userSSL=false
    kafka:
      bootstrap-servers: 67.207.80.139:9093
    redis:
      host: 67.207.80.139
---
server:
  port: 8080
spring:
  config:
    activate:
      on-profile: zz
    datasource:
      url: jdbc:mysql://67.207.80.139:3306/wow?characterEncoding=utf-8&userSSL=false
    kafka:
      bootstrap-servers: 67.207.80.139:9093
    redis:
      host: 67.207.80.139